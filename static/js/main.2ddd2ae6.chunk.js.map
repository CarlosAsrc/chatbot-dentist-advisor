{"version":3,"sources":["ActionProvider.js","MessageParser.js","components/LearningOptions/LearningOptions.js","components/LinkList/LinkList.js","config.js","App.js","index.js"],"names":["ActionProvider","createChatBotMessage","setStateFunc","handleObjectives","sendBotMessage","handleStepByStep","text","updateChatbotState","this","setState","greetingMessage","message","prevState","messages","MessageParser","actionProvider","toLowerCase","includes","greet","LearningOptions","props","optionsMarkup","handler","id","map","option","className","onClick","LinkList","console","log","linkMarkup","options","link","href","url","target","rel","config","botName","initialMessages","widget","customStyles","botMessageBox","backgroundColor","chatButton","widgets","widgetName","widgetFunc","App","messageParser","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oUAyCeA,E,WAvCX,WAAYC,EAAsBC,GAAe,IAAD,gCAUhDC,iBAAmB,WACf,EAAKC,eAAe,wDACpB,EAAKA,eAAe,gCACpB,EAAKA,eAAe,mFAbwB,KAiBhDC,iBAAmB,WACf,EAAKD,eAAe,8FAEpB,EAAKA,eAAe,uCACpB,EAAKA,eAAe,8BACpB,EAAKA,eAAe,gBACpB,EAAKA,eAAe,6BAvBwB,KA2BhDA,eAAiB,SAAAE,GACb,EAAKC,mBAAmB,EAAKN,qBAAqBK,KA3BlDE,KAAKP,qBAAuBA,EAC5BO,KAAKC,SAAWP,E,yCAGpB,WACI,IAAMQ,EAAkBF,KAAKP,qBAAqB,eAClDO,KAAKD,mBAAmBG,K,gCAwB5B,SAAmBC,GACfH,KAAKC,UAAS,SAACG,GAAD,mBAAC,eACRA,GADO,IAEVC,SAAS,GAAD,mBAAMD,EAAUC,UAAhB,CAA0BF,a,KCtB7BG,E,WAbb,WAAYC,GAAiB,oBAC3BP,KAAKO,eAAiBA,E,yCAGxB,SAAMJ,GACqBA,EAAQK,cAEZC,SAAS,UAC5BT,KAAKO,eAAeG,Y,oBCgBbC,EAnBS,SAACC,GACrB,IAKMC,EALU,CACZ,CAAEf,KAAM,0CAA2CgB,QAASF,EAAML,eAAeZ,iBAAkBoB,GAAI,GACvG,CAAEjB,KAAM,qCAAsCgB,QAASF,EAAML,eAAeV,iBAAkBkB,GAAI,IAGxEC,KAAI,SAACC,GAAD,OAC9B,wBACIC,UAAU,yBAEVC,QAASF,EAAOH,QAHpB,SAKKG,EAAOnB,MAHHmB,EAAOF,OAOpB,OAAO,qBAAKG,UAAU,6BAAf,SAA6CL,KCAzCO,G,MAlBE,SAACR,GACdS,QAAQC,IAAIV,GACZ,IAAMW,EAAaX,EAAMY,QAAQR,KAAI,SAACS,GAAD,OACjC,oBAAkBP,UAAU,iBAA5B,SACI,mBACIQ,KAAMD,EAAKE,IACXC,OAAO,SACPC,IAAI,sBACJX,UAAU,qBAJd,SAMKO,EAAK3B,QAPL2B,EAAKV,OAYlB,OAAO,oBAAIG,UAAU,YAAd,SAA2BK,MCmCvBO,EAhDA,CACXC,QAAS,4BACTC,gBAAiB,CAACvC,+BAAqB,8FAAyF,CAC5HwC,OAAQ,qBAGZC,aAAc,CACVC,cAAe,CACXC,gBAAiB,WAErBC,WAAY,CACRD,gBAAiB,YAIzBE,QAAS,CACL,CACIC,WAAY,kBACZC,WAAY,SAAC5B,GAAD,OAAW,cAAC,EAAD,eAAqBA,MAEhD,CACI2B,WAAY,kBACZC,WAAY,SAAC5B,GAAD,OAAW,cAAC,EAAD,eAAcA,KACrCA,MAAO,CACHY,QAAS,CACL,CACI1B,KAAM,qBACN6B,IACI,iGACJZ,GAAI,GAER,CACIjB,KAAM,mBACN6B,IACI,gEACJZ,GAAI,GAER,CACIjB,KAAM,mBACN6B,IAAK,8BACLZ,GAAI,QC5Bb0B,MAVf,WACE,OACE,qBAAKvB,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,cAAC,IAAD,CAASY,OAAQA,EAAQvB,eAAgBf,EAAgBkD,cAAepC,SCNhFqC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.2ddd2ae6.chunk.js","sourcesContent":["\nclass ActionProvider {\n    constructor(createChatBotMessage, setStateFunc) {\n        this.createChatBotMessage = createChatBotMessage;\n        this.setState = setStateFunc;\n    }\n\n    greet() {\n        const greetingMessage = this.createChatBotMessage(\"Hi, friend.\");\n        this.updateChatbotState(greetingMessage);\n    }\n\n    handleObjectives = () => {\n        this.sendBotMessage(\"Os Principais objetivos do preparo radicular são:\")\n        this.sendBotMessage(\"- Manter saúde periapical\")\n        this.sendBotMessage(\"- Condições de reparação da região periapical e canal radicular\")\n    };\n\n\n    handleStepByStep = () => {\n        this.sendBotMessage(\"O preparo é feito na direção cérvico-apical, através dos seguintes passos: \")\n\n        this.sendBotMessage(\"Exploração do canal radicular\")\n        this.sendBotMessage(\"Preparo do ⅓ cervical\")\n        this.sendBotMessage(\"Odontometria\")\n        this.sendBotMessage(\"Preparo do ⅓ apical\")\n    };\n\n\n    sendBotMessage = text => {\n        this.updateChatbotState(this.createChatBotMessage(text));\n    }\n\n    updateChatbotState(message) {\n        this.setState((prevState) => ({\n            ...prevState,\n            messages: [...prevState.messages, message],\n        }));\n    }\n}\n\nexport default ActionProvider;","class MessageParser {\n    constructor(actionProvider) {\n      this.actionProvider = actionProvider;\n    }\n  \n    parse(message) {\n      const lowerCaseMessage = message.toLowerCase()\n      \n      if (lowerCaseMessage.includes(\"hello\")) {\n        this.actionProvider.greet()\n      }\n    }\n  }\n  \n  export default MessageParser","// in src/components/LearningOptions/LearningOptions.jsx\n\nimport React from \"react\";\n\nimport \"./LearningOptions.css\";\n\nconst LearningOptions = (props) => {\n    const options = [\n        { text: \"Objetivos do preparo do canal radicular\", handler: props.actionProvider.handleObjectives, id: 1 },\n        { text: \"Passo a passo do preparo radicular\", handler: props.actionProvider.handleStepByStep, id: 2 }\n    ];\n\n    const optionsMarkup = options.map((option) => (\n        <button\n            className=\"learning-option-button\"\n            key={option.id}\n            onClick={option.handler}\n        >\n            {option.text}\n        </button>\n    ));\n\n    return <div className=\"learning-options-container\">{optionsMarkup}</div>;\n};\n\nexport default LearningOptions;","import React from \"react\";\n\nimport \"./LinkList.css\";\n\nconst LinkList = (props) => {\n    console.log(props);\n    const linkMarkup = props.options.map((link) => (\n        <li key={link.id} className=\"link-list-item\">\n            <a\n                href={link.url}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"link-list-item-url\"\n            >\n                {link.text}\n            </a>\n        </li>\n    ));\n\n    return <ul className=\"link-list\">{linkMarkup}</ul>;\n};\n\nexport default LinkList;","// Config starter code\nimport { createChatBotMessage } from \"react-chatbot-kit\";\n\nimport LearningOptions from \"./components/LearningOptions/LearningOptions\";\nimport LinkList from \"./components/LinkList/LinkList.js\";\n\nconst config = {\n    botName: \"Cirurgião Dentista Bot\",\n    initialMessages: [createChatBotMessage(`Olá! Sou um bot especializado em preparo do canal radicular. O que você deseja saber?`, {\n        widget: \"learningOptions\",\n    }),\n    ],\n    customStyles: {\n        botMessageBox: {\n            backgroundColor: \"#376B7E\",\n        },\n        chatButton: {\n            backgroundColor: \"#376B7E\",\n        },\n    },\n\n    widgets: [\n        {\n            widgetName: \"learningOptions\",\n            widgetFunc: (props) => <LearningOptions {...props} />,\n        },\n        {\n            widgetName: \"javascriptLinks\",\n            widgetFunc: (props) => <LinkList {...props} />,\n            props: {\n                options: [\n                    {\n                        text: \"Introduction to JS\",\n                        url:\n                            \"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/\",\n                        id: 1,\n                    },\n                    {\n                        text: \"Mozilla JS Guide\",\n                        url:\n                            \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide\",\n                        id: 2,\n                    },\n                    {\n                        text: \"Frontend Masters\",\n                        url: \"https://frontendmasters.com\",\n                        id: 3,\n                    },\n                ],\n            },\n        },\n    ],\n}\n\nexport default config","import React from 'react';\nimport Chatbot from 'react-chatbot-kit'\nimport './App.css';\n\nimport ActionProvider from './ActionProvider';\nimport MessageParser from './MessageParser';\nimport config from './config';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Chatbot config={config} actionProvider={ActionProvider} messageParser={MessageParser} />\n      </header>\n    </div>\n  );\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}